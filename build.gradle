buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:3.0.185'
    }
}

apply plugin: 'net.minecraftforge.gradle'

repositories {
    maven {
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
    maven {
        // HWYLA
        url "https://maven.tehnut.info"
    }
}

version = "1.12.2-0.6.4"
group = "cubex2.cs4"
archivesBaseName = "customstuff4"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'
compileJava.options.encoding = compileTestJava.options.encoding = 'UTF-8'

minecraft {
    mappings channel: 'snapshot', version: '20171003-1.12'

    runs {
        client {}
        server {}
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2854'

//    compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api")
    compileOnly fg.deobf("mezz.jei:jei_${mc_version}:${jei_version}")

    compileOnly fg.deobf("mcp.mobius.waila:Hwyla:${hwyla_version}:api")
    runtimeOnly fg.deobf("mcp.mobius.waila:Hwyla:${hwyla_version}")

    // JUnit Jupiter API and TestEngine implementation
    testCompile "org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}"
    testRuntime "org.junit.platform:junit-platform-launcher:${junitPlatformVersion}"
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.mc_version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': project.version, 'mcversion': project.mc_version
    }

    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task deleteExampleMod(type: Delete) {
    delete 'run/mods/examplemod'
    delete 'run/mods/examplemod.zip'
}

task copyExampleModToRun(type: Copy) {
    from 'examplemod'
    into 'run/mods/examplemod'
}

task zipExampleMod(type: Zip) {
    archiveName = 'examplemod.zip'
    destinationDir = file('run/mods')

    from 'examplemod'
}

copyExampleModToRun.dependsOn deleteExampleMod
zipExampleMod.dependsOn deleteExampleMod
